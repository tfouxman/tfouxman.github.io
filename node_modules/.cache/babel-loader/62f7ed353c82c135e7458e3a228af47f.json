{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Tom\\\\Documents\\\\GitHub\\\\tfouxman.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Tom\\\\Documents\\\\GitHub\\\\tfouxman.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Tom\\\\Documents\\\\GitHub\\\\tfouxman.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"C:\\\\Users\\\\Tom\\\\Documents\\\\GitHub\\\\tfouxman.github.io\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  & {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    width: 70%;\\n  }\\n\\n  @media (max-width: 700px) {\\n    & {\\n      width: 100%;\\n    }\\n  }\\n\\n  .footer p {\\n    text-align: center;\\n  }\\n\\n  .footer {\\n    display: flex;\\n    flex-direction: column;\\n    padding: 30px;\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect}from\"react\";import{fetchDailyData}from\"./api\";import{Line,Bar}from\"react-chartjs-2\";import styled from\"styled-components\";var Styles=styled.div(_templateObject());var Chart=function Chart(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,deaths=_ref$data.deaths,recovered=_ref$data.recovered,country=_ref.country;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetchAPI=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setDailyData;_context.next=3;return fetchDailyData();case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchAPI(){return _ref2.apply(this,arguments);};}();fetchAPI();},[]);if(!confirmed)return\"Loading...\";var lineChart=dailyData.length?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref3){var date=_ref3.date;return date;}),datasets:[{data:dailyData.map(function(_ref4){var confirmed=_ref4.confirmed;return confirmed;}),label:\"Infected\",borderColor:\"#3333ff\",fill:true},{data:dailyData.map(function(_ref5){var deaths=_ref5.deaths;return deaths;}),label:\"Deaths\",borderColor:\"red\",backgroundColor:\"rgba(255, 0, 0, 0.2)\",fill:true}]}}):null;var barChart=confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:[\"Infected\",\"Recovered\",\"Deaths\"],datasets:[{label:\"People\",backgroundColor:[\"rgba(0, 0, 255, 0.5)\",\"rgba(0, 255, 0, 0.5)\",\"rgba(255, 0, 0, 0.5)\"],data:[confirmed.value,recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Current state in \".concat(country)}}}):null;return/*#__PURE__*/React.createElement(Styles,null,country?barChart:lineChart,/*#__PURE__*/React.createElement(\"div\",{className:\"footer\"},/*#__PURE__*/React.createElement(\"p\",null,\"The source of the API used is\",\" \",/*#__PURE__*/React.createElement(\"a\",{target:\" \",href:\"https://github.com/mathdroid/covid-19-api\"},\"here\"),\".\"),/*#__PURE__*/React.createElement(\"p\",null,\"The repo used for reference is\",\" \",/*#__PURE__*/React.createElement(\"a\",{target:\" \",href:\"https://github.com/adrianhajdin/project_corona_tracker\"},\"here\"),\".\")));};export default Chart;","map":{"version":3,"sources":["C:/Users/Tom/Documents/GitHub/tfouxman.github.io/src/components/Covid/chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styled","Styles","div","Chart","data","confirmed","deaths","recovered","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","value","legend","display","title","text"],"mappings":"wpCAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,IAAT,CAAeC,GAAf,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAEA,GAAMC,CAAAA,MAAM,CAAGD,MAAM,CAACE,GAAV,mBAAZ,CAyBA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAyD,oBAAtDC,IAAsD,CAA9CC,SAA8C,WAA9CA,SAA8C,CAAnCC,MAAmC,WAAnCA,MAAmC,CAA3BC,SAA2B,WAA3BA,SAA2B,CAAdC,OAAc,MAAdA,OAAc,eACnCb,QAAQ,CAAC,EAAD,CAD2B,wCAC9Dc,SAD8D,eACnDC,YADmD,eAGrEd,SAAS,CAAC,UAAM,CACd,GAAMe,CAAAA,QAAQ,2FAAG,+IACfD,YADe,uBACIb,CAAAA,cAAc,EADlB,qHAAH,kBAARc,CAAAA,QAAQ,2CAAd,CAIAA,QAAQ,GACT,CANQ,CAMN,EANM,CAAT,CAQA,GAAI,CAACN,SAAL,CAAgB,MAAO,YAAP,CAEhB,GAAMO,CAAAA,SAAS,CAAGH,SAAS,CAACI,MAAV,cAChB,oBAAC,IAAD,EACE,IAAI,CAAE,CACJC,MAAM,CAAEL,SAAS,CAACM,GAAV,CAAc,mBAAGC,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAAd,CADJ,CAEJC,QAAQ,CAAE,CACR,CACEb,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAGV,CAAAA,SAAH,OAAGA,SAAH,OAAmBA,CAAAA,SAAnB,EAAd,CADR,CAEEa,KAAK,CAAE,UAFT,CAGEC,WAAW,CAAE,SAHf,CAIEC,IAAI,CAAE,IAJR,CADQ,CAOR,CACEhB,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAGT,CAAAA,MAAH,OAAGA,MAAH,OAAgBA,CAAAA,MAAhB,EAAd,CADR,CAEEY,KAAK,CAAE,QAFT,CAGEC,WAAW,CAAE,KAHf,CAIEE,eAAe,CAAE,sBAJnB,CAKED,IAAI,CAAE,IALR,CAPQ,CAFN,CADR,EADgB,CAqBd,IArBJ,CAuBA,GAAME,CAAAA,QAAQ,CAAGjB,SAAS,cACxB,oBAAC,GAAD,EACE,IAAI,CAAE,CACJS,MAAM,CAAE,CAAC,UAAD,CAAa,WAAb,CAA0B,QAA1B,CADJ,CAEJG,QAAQ,CAAE,CACR,CACEC,KAAK,CAAE,QADT,CAEEG,eAAe,CAAE,CACf,sBADe,CAEf,sBAFe,CAGf,sBAHe,CAFnB,CAOEjB,IAAI,CAAE,CAACC,SAAS,CAACkB,KAAX,CAAkBhB,SAAS,CAACgB,KAA5B,CAAmCjB,MAAM,CAACiB,KAA1C,CAPR,CADQ,CAFN,CADR,CAeE,OAAO,CAAE,CACPC,MAAM,CAAE,CAAEC,OAAO,CAAE,KAAX,CADD,CAEPC,KAAK,CAAE,CAAED,OAAO,CAAE,IAAX,CAAiBE,IAAI,4BAAsBnB,OAAtB,CAArB,CAFA,CAfX,EADwB,CAqBtB,IArBJ,CAuBA,mBACE,oBAAC,MAAD,MACGA,OAAO,CAAGc,QAAH,CAAcV,SADxB,cAEE,2BAAK,SAAS,CAAC,QAAf,eACE,6DACgC,GADhC,cAEE,yBAAG,MAAM,CAAC,GAAV,CAAc,IAAI,CAAC,2CAAnB,SAFF,KADF,cAQE,8DACiC,GADjC,cAEE,yBACE,MAAM,CAAC,GADT,CAEE,IAAI,CAAC,wDAFP,SAFF,KARF,CAFF,CADF,CAwBD,CAnFD,CAqFA,cAAeT,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"./api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  & {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    width: 70%;\r\n  }\r\n\r\n  @media (max-width: 700px) {\r\n    & {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .footer p {\r\n    text-align: center;\r\n  }\r\n\r\n  .footer {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 30px;\r\n  }\r\n`;\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  if (!confirmed) return \"Loading...\";\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.2)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <Styles>\r\n      {country ? barChart : lineChart}\r\n      <div className=\"footer\">\r\n        <p>\r\n          The source of the API used is{\" \"}\r\n          <a target=\" \" href=\"https://github.com/mathdroid/covid-19-api\">\r\n            here\r\n          </a>\r\n          .\r\n        </p>\r\n        <p>\r\n          The repo used for reference is{\" \"}\r\n          <a\r\n            target=\" \"\r\n            href=\"https://github.com/adrianhajdin/project_corona_tracker\"\r\n          >\r\n            here\r\n          </a>\r\n          .\r\n        </p>\r\n      </div>\r\n    </Styles>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}